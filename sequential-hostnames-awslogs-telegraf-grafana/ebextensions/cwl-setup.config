########################################################################
##
########################################################################

Conditions:
  SNSTopicExists : { "Fn::Not" : [{ "Fn::Equals" : [ "", {"Fn::FindInMap" : ["AWSEBOptions", "options", "EBSNSTopicArn"]}]}]}

Outputs:
  ElasticBeanstalkSNSTopicArn:
    Description: "The SNS Topic ARN for Elastic Beanstalk event notifications. Empty string if none specified."
    Value: { "Fn::FindInMap": ["AWSEBOptions", "options", "EBSNSTopicArn"] }


Resources:
  AWSEBAutoScalingGroup:
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          "_OnInstanceBoot":
            "CmpFn::Insert":
              values:
                - CWLogsAgentClearConfig
                - CWLogsAgentConfigSetup
                - CWLogsAgentUpdaterInstallation
                - CWLogsAgentInstallation
          "CWLogsAgentInstallation":
            - CWLogsAgentClearConfig
            - CWLogsAgentConfigSetup
            - CWLogsAgentUpdaterInstallation
            - CWLogsAgentInstallation
          "CWLogsAgentConfigUpdate":
            - CWLogsAgentClearConfig
            - CWLogsAgentConfigSetup
            - CWLogsAgentUpdateConfig
        CWLogsAgentClearConfig:
          commands:
            01-clear-agent-config:
              command: rm -rf /tmp/cwlogs
        CWLogsAgentConfigSetup:
          files:
            "/tmp/cwlogs/conf.d/general.conf":
              content : |
                [general]
                state_file = /var/awslogs/state/agent-state
              mode  : "000400"
              owner : root
              group : root
          commands:
            01-setup-agent-config:
              ## Every .conf file in /tmp/cwlogs/conf.d/ will be concatenated together to form the cwl agent config file
              command: |
                cat /tmp/cwlogs/conf.d/*.conf > /tmp/cwlogs/cwlogs-config.conf
        CWLogsAgentInstallation:
          files:
            "/tmp/cwlogs/awslogs-agent-setup.py" :
              source : "https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py"
              mode  : "000700"
              owner : root
              group : root
            "/tmp/cwlogs/sethostname.sh":
              content: |
                #!/bin/bash
                #
                # /usr/sbin/onboot.sh
                #
                # This script figures out a hostname based on the value of BeansTalk environment name.
                # E.g, "someapp" would result in the hostname someapp-xxx
                # where "xxx" is the next available number. The hostname is set locally and
                # a CNAME record in Route53 is created.
                #
                # The FQDN becomes HOSTNAME . ENVIRONMENT . DOMAIN
                # (e.g. someapp-000.Route53LocalDomain)
                #
                # Once the hostname is set, the telegraf service is restarted so that the certs
                # are generated for the correct hostname.
                # Finally the hostname is set on the "Name" tag of the ec2 instance
                #
                # Dependencies:
                # This script assumes that the following
                # packages are installed:
                # * route53-cli
                # * aws cli
                # * ec2-metadata
                #
                # Date: 2017-08-08
                # Author: Vitalii Samotaiev <vsamotaev@glash.io>

                # BEGIN CONFIGURATION
                # Set these variables accordingly
                DOMAIN=Route53LocalDomain
                AWS_REGION=us-east-1

                echo "$1" > /etc/role
                ROLE_FILE=/etc/role
                EC2_METADATA=/opt/aws/bin/ec2-metadata
                AWS=/usr/bin/aws
                ROUTE53=/usr/bin/route53
                HOSTNAME_CMD=/bin/hostname
                LOGGER=/usr/bin/logger
                CAT=/bin/cat
                SED=/bin/sed
                AWK=/bin/awk
                PRINTF=/usr/bin/printf
                CURL=/usr/bin/curl
                # END CONFIGURATION
                HOSTED_ZONE_ID=`$AWS route53 list-hosted-zones --output text --query "HostedZones[?Name == '$DOMAIN.'].[Id]" | cut -d "/" -f 3`
                SYSTEM_ROLE=`[ -f $ROLE_FILE ] && $CAT $ROLE_FILE`
                if [ -z $SYSTEM_ROLE ]; then
                    exit 0
                fi
                app=${SYSTEM_ROLE%_*}
                role=${SYSTEM_ROLE#*_}
                app_lowercase=`echo "$app" | tr '[:upper:]' '[:lower:]'`
                # hosts=`$ROUTE53 get $HOSTED_ZONE_ID | $AWK -v pattern=^$app_lowercase-.*.$DOMAIN '$0~pattern { printf $1 }'`
                hosts=`$ROUTE53 get $HOSTED_ZONE_ID | $AWK -v pattern=^$app_lowercase-.*.$DOMAIN '$0~pattern { print $1 }'`;
                IFS=$'\n' sorted=($(sort <<<"${hosts[*]}"))
                hosts=($hosts)
                ipv4=`$CURL -fs http://169.254.169.254/latest/meta-data/local-ipv4`
                i=0
                while [ true ]; do
                    num=`$PRINTF "%03d" $i`
                    hostname="$app_lowercase-$num"
                    fqdn="$hostname.$DOMAIN"
                    if [ "${hosts[$i]}" != "$fqdn." ]; then
                        $SED -i "s/^HOSTNAME=.*$/HOSTNAME=$fqdn/" /etc/sysconfig/network
                        $HOSTNAME_CMD $fqdn
                        # Add fqdn to hosts file
                        $CAT<<EOF > /etc/hosts
                # This file is automatically generated by /usr/sbin/onboot.sh script
                127.0.0.1 localhost
                $ipv4 $fqdn $hostname
                EOF
                        $LOGGER "Setting hostname: $fqdn"
                        $LOGGER "Creating CNAME record in Route53"
                        ec2_public_hostname=`$EC2_METADATA -h | $SED 's/local-hostname: //'`
                        ### $ROUTE53 add_record $HOSTED_ZONE_ID $fqdn CNAME $ec2_public_hostname 30 > /tmp/create-route53-cname.out
                        break
                    fi
                    let i+=1
                done

                # Set hostname as "Name" tag
                instance_id=`$EC2_METADATA -i | awk '{ print $2 }'`
                #aws ec2 create-tags --region=$AWS_REGION --resources=$instance_id --tags Key=Name,Value=$hostname
                # Set tags for ASG Route53 SNS CloudWatch Termination event updater
                hostnamelowercase=`echo "$hostname" | tr '[:upper:]' '[:lower:]'`
                tagcname=CNAME
                tagcnamevalue="$hostnamelowercase.$DOMAIN."
                tagzone=ZONE
                tagzonevalue="$DOMAIN."
                taghostname=Name
                aws ec2 create-tags --region=$AWS_REGION --resources=$instance_id --tags Key=$tagcname,Value=$tagcnamevalue
                aws ec2 create-tags --region=$AWS_REGION --resources=$instance_id --tags Key=$tagzone,Value=$tagzonevalue
                aws ec2 create-tags --region=$AWS_REGION --resources=$instance_id --tags Key=$taghostname,Value=$tagcnamevalue

                # Install Telegraf
                wget https://dl.influxdata.com/telegraf/releases/telegraf-1.3.5-1.x86_64.rpm; yum localinstall telegraf-1.3.5-1.x86_64.rpm -y
                logger_config="/etc/telegraf/telegraf.conf"

                # Enable auditlogs
                /bin/mkdir /var/log/audit | /bin/true
                /sbin/chkconfig auditd on
                /sbin/service auditd start
              mode  : "000700"
              owner : root
              group : root
            "/tmp/cwlogs/telegraf.conf.file":
              content: |
                [global_tags]
                # Configuration for telegraf agent
                [agent]
                  interval = "10s"
                  round_interval = true
                  metric_batch_size = 1000
                  metric_buffer_limit = 10000
                  collection_jitter = "0s"
                  flush_interval = "10s"
                  flush_jitter = "0s"
                  precision = ""
                  debug = false
                  quiet = false
                  logfile = ""
                  hostname = ""
                  omit_hostname = false
                ###############################################################################
                #                            OUTPUT PLUGINS                                   #
                ###############################################################################
                [[outputs.influxdb]]
                  urls = ["http://GrafanaHostName:8086"] # required
                  database = "InfluxDB.Name" # required
                  retention_policy = ""
                  write_consistency = "any"
                  timeout = "5s"
                  username = "InfluxDB.UserName"
                  password = "InfluxDB.Password"
                ###############################################################################
                #                            INPUT PLUGINS                                    #
                ###############################################################################
                # Read metrics about cpu usage
                [[inputs.cpu]]
                  percpu = true
                  totalcpu = true
                  collect_cpu_time = false
                # Read metrics about disk usage by mount point
                [[inputs.disk]]
                  ignore_fs = ["tmpfs", "devtmpfs", "devfs"]
                # Read metrics about disk IO by device
                [[inputs.diskio]]
                # Get kernel statistics from /proc/stat
                [[inputs.kernel]]
                # Read metrics about memory usage
                [[inputs.mem]]
                # Get the number of processes and group them by status
                [[inputs.processes]]
                # Read metrics about swap memory usage
                [[inputs.swap]]
                # Read metrics about system load & uptime
                [[inputs.system]]
                # # This plugin gathers interrupts data from /proc/interrupts and /proc/softirqs.
                [[inputs.interrupts]]
                # # Read metrics about network interface usage
                [[inputs.net]]
                # # Read TCP metrics such as established, time wait and sockets counts.
                # [[inputs.netstat]]
                # # Read Nginx's basic status information (ngx_http_stub_status_module)
                # [[inputs.nginx]]
                #   ## An array of Nginx stub_status URI to gather stats.
                #   urls = ["http://localhost/status"]
                # # Read metrics from one or many postgresql servers
                # [[inputs.postgresql]]
                #   ## specify address via a url matching:
                #   ##   postgres://[pqgotest[:password]]@localhost[/dbname]\
                #   ##       ?sslmode=[disable|verify-ca|verify-full]
                #   ## or a simple string:
                #   ##   host=localhost user=pqotest password=... sslmode=... dbname=app_production
                #   ##
                #   ## All connection parameters are optional.
                #   ##
                #   ## Without the dbname parameter, the driver will default to a database
                #   ## with the same name as the user. This dbname is just for instantiating a
                #   ## connection with the server and doesn't restrict the databases we are trying
                #   ## to grab metrics for.
                #   ##
                #   address = "host=localhost user=postgres sslmode=disable"
                #
                #   ## A  list of databases to explicitly ignore.  If not specified, metrics for all
                #   ## databases are gathered.  Do NOT use with the 'databases' option.
                #   # ignored_databases = ["postgres", "template0", "template1"]
                #
                #   ## A list of databases to pull metrics about. If not specified, metrics for all
                #   ## databases are gathered.  Do NOT use with the 'ignored_databases' option.
                #   # databases = ["app_production", "testing"]


                # # Monitor process cpu and memory usage
                # [[inputs.procstat]]
                #   ## Must specify one of: pid_file, exe, or pattern
                #   ## PID file to monitor process
                #   pid_file = "/var/run/nginx.pid"
                #   ## executable name (ie, pgrep <exe>)
                #   # exe = "nginx"
                #   ## pattern as argument for pgrep (ie, pgrep -f <pattern>)
                #   # pattern = "nginx"
                #   ## user as argument for pgrep (ie, pgrep -u <user>)
                #   # user = "nginx"
                #
                #   ## override for process_name
                #   ## This is optional; default is sourced from /proc/<pid>/status
                #   # process_name = "bar"
                #   ## Field name prefix
                #   prefix = ""
                #   ## comment this out if you want raw cpu_time stats
                #   fielddrop = ["cpu_time_*"]
                #   ## This is optional; moves pid into a tag instead of a field
                #   pid_tag = false


                # # Read metrics from one or many redis servers
                # [[inputs.redis]]
                #   ## specify servers via a url matching:
                #   ##  [protocol://][:password]@address[:port]
                #   ##  e.g.
                #   ##    tcp://localhost:6379
                #   ##    tcp://:password@192.168.99.100
                #   ##    unix:///var/run/redis.sock
                #   ##
                #   ## If no servers are specified, then localhost is used as the host.
                #   ## If no port is specified, 6379 is used
                #   servers = ["tcp://localhost:6379"]
                # # Stream and parse log file(s).
                # [[inputs.logparser]]
                #   ## Log files to parse.
                #   ## These accept standard unix glob matching rules, but with the addition of
                #   ## ** as a "super asterisk". ie:
                #   ##   /var/log/**.log     -> recursively find all .log files in /var/log
                #   ##   /var/log/*/*.log    -> find all .log files with a parent dir in /var/log
                #   ##   /var/log/apache.log -> only tail the apache log file
                #   files = ["/var/log/apache/access.log"]
                #   ## Read files that currently exist from the beginning. Files that are created
                #   ## while telegraf is running (and that match the "files" globs) will always
                #   ## be read from the beginning.
                #   from_beginning = false
                #
                #   ## Parse logstash-style "grok" patterns:
                #   ##   Telegraf built-in parsing patterns: https://goo.gl/dkay10
                #   [inputs.logparser.grok]
                #     ## This is a list of patterns to check the given log file(s) for.
                #     ## Note that adding patterns here increases processing time. The most
                #     ## efficient configuration is to have one pattern per logparser.
                #     ## Other common built-in patterns are:
                #     ##   %{COMMON_LOG_FORMAT}   (plain apache & nginx access logs)
                #     ##   %{COMBINED_LOG_FORMAT} (access logs + referrer & agent)
                #     patterns = ["%{COMBINED_LOG_FORMAT}"]
                #     ## Name of the outputted measurement name.
                #     measurement = "apache_access_log"
                #     ## Full path(s) to custom pattern files.
                #     custom_pattern_files = []
                #     ## Custom patterns can also be defined here. Put one pattern per line.
                #     custom_patterns = '''
                #     '''
              mode  : "000700"
              owner : root
              group : root
          commands:
            01-setup-telegraf-agent:
              ## Install the cwlogs agent - this will also install the cli it needs (in a virtualenv)
              command: |
                setsid /tmp/cwlogs/sethostname.sh `{"Ref":"AWSEBEnvironmentName"}` && exit 0;
            02-setup-cwlogs-agent:
              ## Install the cwlogs agent - this will also install the cli it needs (in a virtualenv)
              command: |
                setsid /tmp/cwlogs/awslogs-agent-setup.py -n -r `{"Ref" : "AWS::Region" }` -c /tmp/cwlogs/cwlogs-config.conf && exit 0;
            03-write-new-telegraf-config:
              command: |
                setsid cp /tmp/cwlogs/telegraf.conf.file /etc/telegraf/telegraf.conf; service telegraf restart && exit 0;
        ## Configuration deployment command - update agent if needed
        CWLogsAgentUpdaterInstallation:
          files:
            "/opt/elasticbeanstalk/hooks/configdeploy/enact/00_update_cwlogs_agent.sh":
              content: |
                #!/bin/bash
                . /etc/elasticbeanstalk/.aws-eb-stack.properties
                /opt/aws/bin/cfn-init -v -s "$stack_name" -r "$resource" --region "$region" --configsets CWLogsAgentConfigUpdate > /var/log/eb-cfn-init-call.log 2>&1
              mode  : "000700"
              owner : root
              group : root
        CWLogsAgentUpdateConfig:
          files:
            "/tmp/cwlogs/bin/cwlogs-update.sh":
              content: |
                #!/bin/bash
                log() {
                   echo [$(date -u +"%Y-%m-%d %TZ")] $1
                }
                log "Executing cwlogs agent configuration update"

                if cmp /var/awslogs/etc/awslogs.conf /tmp/cwlogs/cwlogs-config.conf > /dev/null 2>&1; then
                   log "CWlogs Configuration has not changed - not updating"
                   exit 0;
                fi

                log "Copying new cwlogs config to /var/awslogs/etc/awslogs.conf"
                cp /tmp/cwlogs/cwlogs-config.conf /var/awslogs/etc/awslogs.conf;
                log "Restarting awslogs service"
                service awslogs restart;
                log "awslogs service restart complete"
                log "Completed cwlogs agent configuration update"
                exit 0;
              mode  : "000700"
              owner : root
              group : root
            "/tmp/cwlogs/bin/telegraf-update.sh":
              content: |
                #!/bin/bash
                log() {
                   echo [$(date -u +"%Y-%m-%d %TZ")] $1
                }
                log "Executing cwlogs agent configuration update"

                if cmp /etc/telegraf/telegraf.conf /tmp/cwlogs/telegraf.conf.file > /dev/null 2>&1; then
                   log "Telegraf Configuration has not changed - not updating"
                   exit 0;
                fi
                log "Copying new Telegraf config to /etc/telegraf/telegraf.conf"
                cp /tmp/cwlogs/telegraf.conf.file /etc/telegraf/telegraf.conf;
                log "Restarting Telegraf service"
                service telegraf restart;
                log "telegraf service restart complete"
                log "Completed telegraf agent configuration update"
                exit 0;
              mode  : "000700"
              owner : root
              group : root
          commands:
            01-update-agent-config:
              command: "/tmp/cwlogs/bin/cwlogs-update.sh >> /var/log/eb-cwlogs.log 2>&1"
            02-update-agent-config:
              command: "/tmp/cwlogs/bin/telegraf-update.sh >> /var/log/eb-cwlogs.log 2>&1"


## Version deployment command - ensure agent is installed
files:
  "/tmp/cwlogs/bin/cwlogs-install.sh":
    content: |
      #!/bin/bash
      log() {
         echo [$(date -u +"%Y-%m-%d %TZ")] $1
      }

      log "Initiating cwlogs agent installation/update"
      . /etc/elasticbeanstalk/.aws-eb-stack.properties
      CONFIG_SET=CWLogsAgentInstallation

      ## just do an update if we think it's already installed
      if [ -f "/var/awslogs/etc/awslogs.conf" ]; then
        CONFIG_SET=CWLogsAgentConfigUpdate
        log "Running agent configuration update"
      else
        log "Running agent installation"
      fi

      /opt/aws/bin/cfn-init -v -s "$stack_name" -r "$resource" --region "$region" --configsets $CONFIG_SET;
      log "Completed cwlogs agent installation/update"
      exit 0;
    mode  : "000700"
    owner : root
    group : root

commands:
  01-ensure-agent-installation:
    command:  "/tmp/cwlogs/bin/cwlogs-install.sh >> /var/log/eb-cwlogs.log 2>&1"
